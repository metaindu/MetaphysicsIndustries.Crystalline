/*****************************************************************************
 *                                                                           *
 *  CrystallineControlPathParentChildrenCollection.cs                        *
 *  14 January 2008                                                          *
 *  Project: Crystalline                                                     *
 *  Written by: Richard Sartor                                               *
 *  Copyright © 2008 Metaphysics Industries, Inc.                            *
 *                                                                           *
 *  Auto-generated by buildinterlinking4.pl on 9 December 2008.              *
 *                                                                           *
 *  An unordered collection of Path objects, based on an existing            *
 *    CrystallineControlEntityParentChildrenCollection collection.           *
 *                                                                           *
 *****************************************************************************/

using System;
using System.Collections.Generic;
using MetaphysicsIndustries.Collections;

namespace MetaphysicsIndustries.Crystalline
{
	public class CrystallineControlPathParentChildrenCollection : ICollection<Path>, IDisposable
    {
        public CrystallineControlPathParentChildrenCollection(CrystallineControlEntityParentChildrenCollection parentInterlinking)
        {
            if (parentInterlinking == null) { throw new ArgumentNullException("parentInterlinking"); }

            _parentInterlinking = parentInterlinking;
        }

        public virtual void Dispose()
        {
            Clear();
        }

        public void AddRange(params Path[] items)
        {
            AddRange((IEnumerable<Path>)items);
        }
        public void AddRange(IEnumerable<Path> items)
        {
            foreach (Path item in items)
            {
                Add(item);
            }
        }
        public void RemoveRange(params Path[] items)
        {
            RemoveRange((IEnumerable<Path>)items);
        }
        public void RemoveRange(IEnumerable<Path> items)
        {
            foreach (Path item in items)
            {
                Remove(item);
            }
        }

        //ICollection<Path>
        public virtual void Add(Path item)
        {
            if (!Contains(item))
            {
                _count++;
            }

            _parentInterlinking.Add(item);
        }

        public virtual bool Contains(Path item)
        {
            return _parentInterlinking.Contains(item);
        }

        public virtual bool Remove(Path item)
        {
            if (Contains(item))
            {
                _count--;
                item.From = null;
                item.To = null;
            }

            return _parentInterlinking.Remove(item);
        }

        public virtual void Clear()
        {
            Path[] array = new Path[Count];

            CopyTo(array, 0);

            foreach (Path item in array)
            {
                Remove(item);
            }
        }

        public virtual void CopyTo(Path[] array, int arrayIndex)
        {
            List<Path> list = new List<Path>(Count);
            foreach (Path item in this)
            {
                list.Add(item);
            }
            list.CopyTo(array, arrayIndex);
        }

        public virtual IEnumerator<Path> GetEnumerator()
        {
            foreach (object item in _parentInterlinking)
            {
                if (item is Path)
                {
                    yield return (Path)item;
                }
            }

            yield break;
        }

        //ICollection<Path>
        public virtual int Count
        {
            get { return _count; }
        }

        public virtual bool IsReadOnly
        {
            get { return _parentInterlinking.IsReadOnly; }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        private CrystallineControlEntityParentChildrenCollection _parentInterlinking;
        private int _count = 0;
    }
}
